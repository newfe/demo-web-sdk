{
  "name": "Demo-web-sdk",
  "tagline": "Demostration of Rong Web SDK.",
  "body": "demo-web-sdk\r\n============\r\n\r\nDemostration of Rong Web SDK.\r\n\r\n## 融云 Web SDK 如何使用\r\n\r\n[文档参考](http://docs.rongcloud.cn/api/js/index.html \" SDK 文档\")\r\n\r\n\r\n使用融云 `Web SDK` 发消息之前必须利用申请的`appkey`进行初始化，只有在初始化之后才能使用RongIMClient.getInstance()方法得到实例.<br/>\r\n*如只想知晓如何使用 Web SDK 请参考 `SDK_Demo.html`*\r\n\r\n## 指定版本号引用\r\n`http://res.websdk.rongcloud.cn/RongIMClient-0.9.10.min.js` 历史版本号目前可从0.9.1到0.9.10。\r\n>+   [0.9.1](http://res.websdk.rongcloud.cn/RongIMClient-0.9.1.min.js)\r\n>+   [0.9.2](http://res.websdk.rongcloud.cn/RongIMClient-0.9.2.min.js)\r\n>+   [0.9.3](http://res.websdk.rongcloud.cn/RongIMClient-0.9.3.min.js)\r\n>+   [0.9.4](http://res.websdk.rongcloud.cn/RongIMClient-0.9.4.min.js)\r\n>+   [0.9.5](http://res.websdk.rongcloud.cn/RongIMClient-0.9.5.min.js)\r\n>+   [0.9.6](http://res.websdk.rongcloud.cn/RongIMClient-0.9.6.min.js)\r\n>+   [0.9.7](http://res.websdk.rongcloud.cn/RongIMClient-0.9.7.min.js)\r\n>+   [0.9.8](http://res.websdk.rongcloud.cn/RongIMClient-0.9.8.min.js)\r\n>+   [0.9.9](http://res.websdk.rongcloud.cn/RongIMClient-0.9.9.min.js)\r\n>+   [0.9.10](http://res.websdk.rongcloud.cn/RongIMClient-0.9.10.min.js)\r\n>+   [0.9.11](http://res.websdk.rongcloud.cn/RongIMClient-0.9.11.min.js)\r\n\r\n#### 此事例中的代码皆为0.9.10版本，使用时请注意兼容性问题。\r\n\r\n### 初始化 Web SDK ，此项必须设置\r\n```js\r\nRongIMClient.init(\"appkey\");\r\n```\r\n### 设置链接状态监听器，此项必须设置\r\n```js\r\nRongIMClient.setConnectionStatusListener({  \r\n     onChanged: function (status) {  \r\n          switch (status) {\r\n                //链接成功\r\n                case RongIMClient.ConnectionStatus.CONNECTED:\r\n                    console.log('链接成功');\r\n                    break;\r\n                //正在链接\r\n                case RongIMClient.ConnectionStatus.CONNECTING:\r\n                    console.log('正在链接');\r\n                    break;\r\n                //重新链接\r\n                case RongIMClient.ConnectionStatus.RECONNECT:\r\n                    console.log('重新链接');\r\n                    break;\r\n                //其他设备登陆\r\n                case RongIMClient.ConnectionStatus.OTHER_DEVICE_LOGIN:\r\n                //连接关闭\r\n                case RongIMClient.ConnectionStatus.CLOSURE:\r\n                //未知错误\r\n                case RongIMClient.ConnectionStatus.UNKNOWN_ERROR:\r\n                //登出\r\n                case RongIMClient.ConnectionStatus.LOGOUT:\r\n                //用户已被封禁\r\n                case RongIMClient.ConnectionStatus.BLOCK:\r\n                    break;\r\n            }\r\n     }  \r\n}); \r\n```\r\n### 链接融云服务器，此项必须设置\r\n\r\n此方法为异步方法，请确定链接成功之后再执行其他操作。成功返回登录人员id失败则返回失败枚举对象\r\n```js\r\nRongIMClient.connect(\"token\", {\r\n     onSuccess: function (userid) {\r\n         window.console.log(\"connected，userid＝\" + userid)\r\n     },\r\n     onError: function (c) {\r\n          var info = '';\r\n          switch (c) {\r\n               case RongIMClient.callback.ErrorCode.TIMEOUT:\r\n                    info = '超时';\r\n                    break;\r\n               case RongIMClient.callback.ErrorCode.UNKNOWN_ERROR:\r\n                    info = '未知错误';\r\n                    break;\r\n               case RongIMClient.ConnectErrorStatus.UNACCEPTABLE_PROTOCOL_VERSION:\r\n                    info = '不可接受的协议版本';\r\n                    break;\r\n               case RongIMClient.ConnectErrorStatus.IDENTIFIER_REJECTED:\r\n                    info = 'appkey不正确';\r\n                    break;\r\n               case RongIMClient.ConnectErrorStatus.SERVER_UNAVAILABLE:\r\n                    info = '服务器不可用';\r\n                    break;\r\n               case RongIMClient.ConnectErrorStatus.TOKEN_INCORRECT:\r\n                    info = 'token无效';\r\n                    break;\r\n               case RongIMClient.ConnectErrorStatus.NOT_AUTHORIZED:\r\n                    info = '未认证';\r\n                    break;\r\n               case RongIMClient.ConnectErrorStatus.REDIRECT:\r\n                    info = '重新获取导航';\r\n                    break;\r\n               case RongIMClient.ConnectErrorStatus.PACKAGE_ERROR:\r\n                    info = '包名错误';\r\n                    break;\r\n               case RongIMClient.ConnectErrorStatus.APP_BLOCK_OR_DELETE:\r\n                    info = '应用已被封禁或已被删除';\r\n                    break;\r\n               case RongIMClient.ConnectErrorStatus.BLOCK:\r\n                    info = '用户被封禁';\r\n                    break;\r\n               case RongIMClient.ConnectErrorStatus.TOKEN_EXPIRE:\r\n                    info = 'token已过期';\r\n                    break;\r\n               case RongIMClient.ConnectErrorStatus.DEVICE_ERROR:\r\n                    info = '设备号错误';\r\n                    break;\r\n          }\r\n          console.alert(\"失败:\" + info);\r\n     }\r\n});\r\n```\r\n### 设置消息监听器，此项必须设置\r\n\r\n所有接收的消息都通过此监听器进行处理，可以通过message.getMessageType()和RongIMClient.MessageType枚举对象来判断消息类型\r\n```js\r\nRongIMClient.getInstance().setOnReceiveMessageListener({\r\n     onReceived: function (message) {\r\n         //message为RongIMMessage子类实例\r\n         console.log(message.getContent());\r\n     }\r\n});\r\n```\r\n### 得到RongIMClient实例对象,只有执行init()之后才能使用getInstance()方法\r\n```js\r\nvar ins = RongIMClient.getInstance();\r\n```\r\n### 设置私人会话类型\r\n```js\r\nvar contype = RongIMClient.ConversationType.PRIVATE;\r\n```\r\n### 例如注册某个元素点击事件(举例)\r\n```js\r\nelement.onclick = function () {\r\n//调用实例的发送消息方法\r\n     ins.sendMessage(contype, \"targetId\", RongIMClient.TextMessage.obtain(\"发送消息内容\"), null, {\r\n           onSuccess: function () {\r\n                //发送成功逻辑处理\r\n           },\r\n           onError: function (x) {\r\n                var info = '';\r\n                switch (x) {\r\n                    case RongIMClient.callback.ErrorCode.TIMEOUT:\r\n                        info = '超时';\r\n                        break;\r\n                    case RongIMClient.callback.ErrorCode.UNKNOWN_ERROR:\r\n                        info = '未知错误';\r\n                        break;\r\n                    case RongIMClient.SendErrorStatus.REJECTED_BY_BLACKLIST:\r\n                        info = '在黑名单中，无法向对方发送消息';\r\n                        break;\r\n                    case RongIMClient.SendErrorStatus.NOT_IN_DISCUSSION:\r\n                        info = '不在讨论组中';\r\n                        break;\r\n                    case RongIMClient.SendErrorStatus.NOT_IN_GROUP:\r\n                        info = '不在群组中';\r\n                        break;\r\n                    case RongIMClient.SendErrorStatus.NOT_IN_CHATROOM:\r\n                        info = '不在聊天室中';\r\n                        break;\r\n                    default :\r\n                        info = x;\r\n                        break;\r\n                }\r\n                console.alert('发送失败:' + info);\r\n           }\r\n       });\r\n};\r\n```\r\n### 同步会话列表(此方法正处于调试阶段，后期可能会有改动)\r\n在浏览器中使用融云`web SDK`与在移动端中使用融云`ios、安卓SDK`不同的是浏览器一刷新页面，之前已经存好的会话列表都将会清空。为了减少这种情况引起的麻烦，可以使用`RongIMClient.getInstance().syncConversationList()`方法，来同步的会话列表。这样的话，就不会因为刷新页面导致会话列表情况所引起的种种麻烦了。\r\n```js\r\n RongIMClient.getInstance().syncConversationList({\r\n                        onSuccess:function(){\r\n                            //同步会话列表\r\n                            setTimeout(function(){\r\n                              var ConversationList = RongIMClient.getInstance().getConversationList();\r\n                              // do something\r\n                            },1000);\r\n                        },onError:function(){\r\n                        }\r\n                    });\r\n```\r\n\r\n### 获取历史纪录(此方法正处于调试阶段，后期可能会有改动)\r\n融云 `web SDK`最新提供`RongIMClient.getInstance().getHistoryMessages()`方法，来帮助开发者获取历史纪录。不再需要为如何在web端存储历史纪录而发愁。*使用此方法前提是APP必须`开启历史消息漫游(此接口为收费项目)`，如APP没有开启历史消息漫游则执行onError方法。*\r\n```js\r\n// 此方法最多一次行拉取20条消息。拉取顺序按时间倒序拉取。\r\nRongIMClient.getInstance().getHistoryMessages(RongIMClient.ConversationType.PRIVATE,'targeid',10,{\r\n     onSuccess:function(symbol,HistoryMessages){\r\n     // symbol为boolean值，如果为true则表示还有剩余历史消息可拉取，为false的话表示没有剩余历史消息可供拉取。\r\n     // HistoryMessages 为拉取到的历史消息列表\r\n     },onError:function(){\r\n     // APP未开启消息漫游或处理异常\r\n     // throw new ERROR ......\r\n     }\r\n})\r\n```\r\n### 注册自定义消息\r\n```js\r\n//注册一个自定义消息\r\nRongIMClient.registerMessageType({messageType:'EmptyMessage',objectName:'s:empty',fieldName:['Name','Age','Address','Occupation']});\r\n\r\nvar myMsg=new RongIMClient.EmptyMessage({Name:'Jeams',Age:32,Address:'beijing',Occupation:'Spy'});\r\n\r\nmyMsg.getObjectName(); // => 's:empty' 根据此字段判断消息类型\r\n\r\nmyMsg.getMessageType(); // => 'EmptyMessage' 消息名称\r\n\r\nmyMsg.getMessageType() == RongIMClient.MessageType.EmptyMessage; // => true 注册完消息类型之后 RongIMClient.MessageType 会自动添加一个自定义消息类型\r\n\r\nmyMsg instanceOf RongIMClient.RongIMMessage; // => true 继承自融云消息基类\r\n\r\nmyMsg.getDetail(); // => {Name:'Jeams',Age:32,Address:'beijing',Occupation:'Spy'} 得到消息体\r\n```\r\n### 检测是否有未收到的消息\r\n融云目前的消息状态只有`送达`和`未送达`，没有`已读`和`未读`的状态。此接口用来查询是否有服务器`未送达`的消息。\r\n```js\r\n//此接口可独立使用，不依赖init()和connect()方法。\r\nRongIMClient.hasUnreadMessages('APPKEY','TOKEN',{\r\n    onSuccess:function(symbol){\r\n        if(symbol){\r\n            // 有未收到的消息\r\n        }else{\r\n            // 没有未收到的消息\r\n        }\r\n    },onError:function(err){\r\n        // 错误处理...\r\n    }\r\n});\r\n```\r\n### 兼容CMD、AMD等CommonJS规范\r\n融云`web SDK`从`0.9.9`版本起将开始支持seaJs和requireJs等模块加载器。\r\n```js\r\n//以下代码仅以requireJs做示范\r\nrequire.config({\r\n    paths: {\r\n        rongSDK: 'http://res.websdk.rongcloud.cn/RongIMClient-0.9.10.min'\r\n    }\r\n});\r\nrequire(['rongSDK'], function(RongIMClient) {\r\n    //do something ...\r\n});\r\n\r\n```\r\n此外，也可以当作子模块引入。\r\n*当引用seaJs或requireJs的时候`web SDK`内部会定义一个 `RongIMClient`模块。所以，当想把SDK当作子模块引入时，直接引用`RongIMClient`就可以了。*\r\n```js\r\ndefine(\"modules_one\", ['RongIMClient'], function (rong) {\r\n    // do something ...\r\n});\r\nrequire(['modules_one'],function(modules){\r\n   //do something ... \r\n});\r\n```\r\n使用`seaJs`进行模块加载\r\n```js\r\nseajs.config({\r\n    alias: {\r\n        rong: 'http://res.websdk.rongcloud.cn/RongIMClient-0.9.9.min'\r\n    }\r\n});\r\nseajs.use(['rong'], function () {\r\n     //do something ...\r\n});\r\n```\r\n\r\n### Web SDK 浏览器兼容性\r\n```js\r\n\r\n //PC side\r\n //-----------------------------------------------------------------------------------------\r\n //|Desktop Feature| Chrome | Firefox (Gecko) | Internet Explorer | Opera | Safari (WebKit)|\r\n //----------------------------------------------------------------------------------------\r\n //|Basic support  |   3    |     3.5         |          6        |   12  |        4       |\r\n //-----------------------------------------------------------------------------------------\r\n \r\n //mobile side\r\n //-----------------------------------------------------------------------------------------------------------------\r\n //|Mobile Feature| Android | Chrome for Android | Firefox Mobile (Gecko) | IE Phone | Opera Mobile | Safari Mobile|\r\n //-----------------------------------------------------------------------------------------------------------------\r\n //|Basic support |     ?   |     0.16  (Yes)    |          ?             |     ?    |     ?        |      ?       |  \r\n //-----------------------------------------------------------------------------------------------------------------\r\n \r\n```\r\n\r\n### 使用指定链接通道链接服务器 \r\nWeb SDK 通道采用层层降级的方式进行兼容处理。连接通道首先默认使用websocket，如环境不支持websocket则自动降级至 Flash socket，不支持 Flash 则自定降级至 xhr-polling，以此来达到全兼容的目的。\r\n<br/>\r\n如果想强制使用长链接连接服务器则必须设置`window.WEB_XHR_POLLING = true;`\r\n#### 通道选项设置[使用此项必须为0.9.6版本,使用前请确定SDK版本号为0.9.6及以上版本]\r\n```js\r\n     //强制使用长链接进行通讯 设置此项，并保证此项优先级最高并且最先被执行，否则设置无效\r\n     window.WEB_XHR_POLLING = true;\r\n  ```\r\n  ```js\r\n     //强制使用flash进行通讯 设置此项，并保证此项优先级最高并且最先被执行，否则设置无效\r\n     window.WEB_SOCKET_FORCE_FLASH = true;\r\n```\r\n##通道选项优先级比较\r\n`window.WEB_SOCKET_FORCE_FLASH > window.WEB_XHR_POLLING`\r\n\r\n### 使用指定存储\r\n强制使用localstorage存储SDK标识数据，主要用来兼容Hybrid应用。\r\n*(ps:在Hybrid应用中无法使用Cookie功能，导致SDK程序异常。可使用此选项，将标志数据存储到localstorage中。)*\r\n```js\r\n     //兼容Hybrid应用，可设置此项\r\n     window.FORCE_LOCAL_STORAGE = true;\r\n```\r\n\r\n#### 注意:\r\n 1 : `Web SDK` 是全异步的，所以发送消息之前确保链接成功。<br/>\r\n 2 : 本demo仅做演示使用，页面不做兼容性考虑。<br/>\r\n 3 : 本`Web SDK`为强兼容性，demo的弱兼容性与SDK无关。<br/>\r\n 4 : 使用本示例的页面在商业上使用而引发的处理不当与本人以及本人所属组织无关。<br/>\r\n 5 : 本示例仅做演示，仅仅只做演示。未考虑低版本及部分版本浏览器兼容性。<br/>\r\n 6 : 浏览器兼容性项中未列出的浏览器版本项皆为不支持的浏览器版本\r\n### 须知\r\n本Demo需配合`demo server`一起使用。[Demo Server](https://github.com/rongcloud/demo-server-php)\r\n<hr>\r\n## 表情帮助库如何使用？\r\n`http://res.websdk.rongcloud.cn/RongIMClient.emoji-0.9.2.min.js` 融云官方表情帮助库引用地址。本表情库使用的是标准的 `emoji` 表情。本表情库一共有128个表情,默认为为22px＊22px。表情库是基于 `Web SDK` 的，使用之前请务必提前载入 `Web SDK`.表情库中的方法均为`静态方法`.由于部分浏览器显示本表情的 `tag` 为一个小方块。无法得到内容。此处可用escape()方法得到表情 `tag` \r\n```js\r\n     console.log('\\ud83d\\ude00');\r\n     //例如chrome中显示 \\ud83d\\ude00 为一个小方块，可用escape()方法\r\n     var str = escape('\\ud83d\\ude00');\r\n     console.log(str);\r\n     //返回％ud83d％ude00，将％替换为\\既是表情的 tag 属性\r\n     \r\n     //表情对象的格式为\r\n     var emojiObject={\r\n          englishName:'表情英文名称',\r\n          chineseName:'表情中文名称',\r\n          img:'一个nodeName为B的HTMLElement元素，背景为表情图片',\r\n          tag:'表情的标签，为一组unicode码'\r\n     }\r\n```\r\n\r\n#### RongIMClient.Expression.getAllExpression\r\n得到指定数量的表情\r\n```js \r\n var emojiObjectList = RongIMClient.Expression.getAllExpression(64,0);\r\n  //从下标为0的位置检索64个表情对象,startIndex与count只和最大为128，因为表情对象最多为128个。\r\n  for(var i=0,item;item=emojiObjectList[i++];){\r\n     console.log(item.englishName,item.chineseName,item.img,item.tag);\r\n     //依次打印表情元素\r\n  }\r\n```\r\n\r\n#### RongIMClient.Expression.getEmojiByContent\r\n根据表情的 `content` ( `content` 为一个UTF16码，可根据表情对象 `tag` 属性计算得到此UTF16码)来得到表情对象\r\n```js\r\n     var emojiObject = RongIMClient.Expression.getEmojiByContent('\\u1F600');\r\n     //如果传入的不是合法UTF16码或者表情名单中不存在此UTF16码则返回 undeined \r\n     console.log(emojiObject);\r\n```\r\n\r\n#### RongIMClient.Expression.calcUTF\r\n根据表情的 `content` 计算得到表情的 `tag` 属性\r\n```js\r\n     var tag = RongIMClient.Expression.calcUTF('\\u1F600');\r\n     console.log(tag);\r\n     //返回\\ud83d\\ude00 即将 \\u1F600 计算为 \\ud83d\\ude00\r\n```\r\n\r\n#### RongIMClient.Expression.getEmojiObjByEnglishNameOrChineseName\r\n根据表情的中文名称或者英文名称得到表情对象\r\n```js\r\n     var emojiObject = RongIMClient.Expression.getEmojiObjByEnglishNameOrChineseName(\"足球\");\r\n     console.log(emojiObject);\r\n```\r\n\r\n#### RongIMClient.Expression.retrievalEmoji\r\n检索传入的字符串中是否含有表情 `tag`，如有则根据传入的callback函数执行制定操作,callback函数中 `务必带返回值` \r\n```js\r\n     var str = RongIMClient.Expression.retrievalEmoji('这是一个表情\\ud83d\\ude00',function(emojiObject){\r\n          console.log(emojiObject);\r\n          return emojiObject.chineseName;\r\n     });\r\n     console.log(str);\r\n     //打印为 这是一个表情狞笑\r\n     \r\n```\r\n### 浏览器兼容性\r\n```js\r\n // IE 6+ 、chrome 3+ 、firefox 3.5+ 、safari 4+ 、 opera 12+\r\n```\r\n<hr>\r\n## 音频播放帮助库如何使用？\r\n`http://res.websdk.rongcloud.cn/RongIMClient.voice-0.9.1.min.js` 融云官方音频播放帮助库引用地址.音频播放帮助库是基于 `Web SDK` 的，使用之前请务必提前载入 `Web SDK`.音频播放帮助库中的方法均为`静态方法`.与`IE`以及`opera`内核类型浏览器不兼容。\r\n\r\n#### RongIMClient.voice.init\r\n初始化音频播放帮助库,使用本库之前务必进行初始化操作，返回为 `boolean` 类型用来说明次音频库是否已经初始化完成\r\n```js\r\n     var isInit = RongIMClient.voice.init();\r\n     console.log(isInit);\r\n     //可以根据isInit来判断是否已经初始化完成\r\n```\r\n\r\n#### RongIMClient.voice.play\r\n播放传入的格式为AMR的音频BASE64码\r\n```js\r\n     RongIMClient.voice.play('格式为AMR的音频BASE64码','音频持续时间(秒)');\r\n     //如果不知道音频的持续时间，可通过音频base64长度除以1024得到大概秒数\r\n```\r\n#### RongIMClient.voice.onprogress\r\n音频播放过程中执行的进度方法,需自行注册.\r\n```js\r\n     RongIMClient.voice.onprogress ＝ function(){\r\n          console.log(\"正在执行\");\r\n     };\r\n     //执行单位时间为一秒执行一次\r\n```\r\n### 浏览器兼容性\r\n```js\r\n //pc :     Firefox (Gecko) 3.6 (1.9.2)+     Chrome 7+   Safari 6.0.2+\r\n //mobile :  Firefox (Gecko) 32+     Android 3+  Safari 6.1+\r\n```\r\n<hr>\r\n## Web 端本地存储帮助库如何使用？\r\n`http://res.websdk.rongcloud.cn/RongIMClient.indexedDB.min.js` 融云官方 Web 端本地存储帮助库引用地址. Web 端本地存储帮助库是基于 `indexed DB` 的，使用之前请务必确保提前载入 `Web SDK` 和当前浏览器支持 `indexed DB` . Web 端本地存储帮助库中的方法均为`静态方法`.\r\n\r\n#### RongIMClient.indexedDB.getMessageListFromIndexedDB\r\n得到本地之前存储的消息对象列表.\r\n```js\r\n     RongIMClient.indexedDB.getMessageListFromIndexedDB(function(msgList){\r\n          console.log(msgList);\r\n     });\r\n```\r\n\r\n#### RongIMClient.indexedDB.addMessageToIndexedDB\r\n将消息对象添加到本地存储.\r\n```js\r\n     var msg=RongIMClient.TextMessage.obtain(\"this is a demo\");\r\n     msg.setMessageId(Math.random());\r\n     var messageId=msg.getMessageId();\r\n     RongIMClient.indexedDB.addMessageToIndexedDB(msg,function(){\r\n          console.log('add success');\r\n     });\r\n```\r\n#### RongIMClient.indexedDB.deleteMessageFromIndexedDB\r\n根据消息标识id把指定消息对象从本地存储删除.\r\n```js\r\n     RongIMClient.indexedDB.deleteMessageFromIndexedDB(messageId,function(){\r\n          console.log('delete success');\r\n     });\r\n```\r\n#### RongIMClient.indexedDB.getMessageListCountFromIndexedDB\r\n得到本地存储的消息对象列表长度.\r\n```js\r\n     RongIMClient.indexedDB.getMessageListCountFromIndexedDB(function(count){\r\n          console.log('length : ' + count);\r\n     });\r\n```\r\n### 浏览器兼容性\r\n```js\r\n //pc :     Firefox (Gecko) 4 (2)+     Chrome 12+  Internet Explorer 10+\r\n //mobile :  Firefox (Gecko) 6+\r\n```\r\n",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}